AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AWS Marketplace Serverless SaaS Integration Application
Globals:
  Function:
    Timeout: 15
  Api:
    Cors:
      AllowMethods: '''POST,OPTIONS'''
      AllowHeaders: '''*'''
      AllowOrigin: '''*'''
      AllowCredentials: '''*'''
Parameters:
  WebsiteS3BucketName:
    Type: String
    ConstraintDescription: S3 bucket name must follow S3 recommendations https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucketnamingrules.html
    Default: ''
  NewSubscribersTableName:
    Type: String
    AllowedPattern: .*
    Default: AWSMarketplaceSubscribers
  AWSMarketplaceMeteringRecordsTableName:
    Type: String
    AllowedPattern: .*
    Default: AWSMarketplaceMeteringRecords
  TypeOfSaaSListing:
    Type: String
    Default: contracts_with_subscription
    AllowedValues:
    - contracts_with_subscription
    - contracts
    - subscriptions
  SNSAccountID:
    Type: String
    Default: '287250355862'
    Description: This is the AWS account hosting the SNS Entitlement and Subscription
      topics for your product.
    AllowedValues:
    - '287250355862'
  SNSRegion:
    Type: String
    Default: us-east-1
    Description: This is the AWS region of the SNS Entitlement and Subscription topics
      for your product.
    AllowedValues:
    - us-east-1
  ProductId:
    Type: String
    AllowedPattern: .*
  MarketplaceTechAdminEmail:
    Type: String
    AllowedPattern: .*
  MarketplaceSellerEmail:
    Type: String
    AllowedPattern: .*
    Default: ''
  CreateCrossAccountRole:
    Default: 'false'
    Description: Do you intend to use cross account access with this integration core?
    Type: String
    AllowedValues:
    - 'true'
    - 'false'
  CrossAccountId:
    Default: ''
    Description: Enter the cross AWS account id
    Type: String
  CrossAccountRoleName:
    Type: String
    Description: 'Your Role Name (ex: OrganizationAccountAccessRole); This will need
      to be the same across all of the Member Accounts'
  CreateRegistrationWebPage:
    Default: 'true'
    Type: String
    AllowedValues:
    - 'true'
    - 'false'
  UpdateFulfillmentURL:
    Default: 'false'
    Type: String
    Description: 'WARNING: This will update your product''s fulfillment URL automatically.
      Be careful if your product is already public'
    AllowedValues:
    - 'true'
    - 'false'
Conditions:
  CreateEntitlementLogic:
    Fn::Or:
    - Fn::Equals:
      - Ref: TypeOfSaaSListing
      - contracts_with_subscription
    - Fn::Equals:
      - Ref: TypeOfSaaSListing
      - contracts
  CreateSubscriptionLogic:
    Fn::Or:
    - Fn::Equals:
      - Ref: TypeOfSaaSListing
      - contracts_with_subscription
    - Fn::Equals:
      - Ref: TypeOfSaaSListing
      - subscriptions
  CreateWeb:
    Fn::Equals:
    - Ref: CreateRegistrationWebPage
    - true
  Buyernotificationemail:
    Fn::Not:
    - Fn::Equals:
      - Ref: MarketplaceSellerEmail
      - ''
  CreateCrossAccount:
    Fn::Equals:
    - Ref: CreateCrossAccountRole
    - true
  UpdateFulfillment:
    Fn::Equals:
    - Ref: UpdateFulfillmentURL
    - true
Resources:
  ServerlessApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      MethodSettings:
      - ResourcePath: /subscriber
        HttpMethod: POST, OPTIONS
      - ResourcePath: /redirectmarketplacetoken
        HttpMethod: POST, OPTIONS
    Metadata:
      SamResourceId: ServerlessApi
  CrossAccountRoleForSaaSIntegration:
    Type: AWS::IAM::Role
    Condition: CreateCrossAccount
    DependsOn:
    - AWSMarketplaceMeteringRecords
    - AWSMarketplaceSubscribers
    Properties:
      RoleName:
        Fn::Join:
        - '-'
        - - CrossAccountRoleName
          - Fn::Select:
            - 0
            - Fn::Split:
              - '-'
              - Fn::Select:
                - 2
                - Fn::Split:
                  - /
                  - Ref: AWS::StackId
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            AWS:
            - Fn::Join:
              - ':'
              - - 'arn:aws:iam:'
                - Ref: CrossAccountId
                - root
          Action:
          - sts:AssumeRole
          Condition:
            StringEquals:
              sts:ExternalId:
                Ref: CrossAccountRoleName
      Path: /
      Policies:
      - PolicyName:
          Fn::Join:
          - '-'
          - - CrossAccountPolicy
            - Fn::Select:
              - 0
              - Fn::Split:
                - '-'
                - Fn::Select:
                  - 2
                  - Fn::Split:
                    - /
                    - Ref: AWS::StackId
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:PutItem
            - dynamodb:DeleteItem
            - dynamodb:UpdateItem
            Resource:
            - Fn::GetAtt:
              - AWSMarketplaceMeteringRecords
              - Arn
            - Fn::GetAtt:
              - AWSMarketplaceSubscribers
              - Arn
    Metadata:
      SamResourceId: CrossAccountRoleForSaaSIntegration
  AWSMarketplaceMeteringRecords:
    Type: AWS::DynamoDB::Table
    Condition: CreateSubscriptionLogic
    Properties:
      AttributeDefinitions:
      - AttributeName: customerIdentifier
        AttributeType: S
      - AttributeName: create_timestamp
        AttributeType: N
      - AttributeName: metering_pending
        AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
      - AttributeName: customerIdentifier
        KeyType: HASH
      - AttributeName: create_timestamp
        KeyType: RANGE
      GlobalSecondaryIndexes:
      - IndexName: PendingMeteringRecordsIndex
        KeySchema:
        - AttributeName: metering_pending
          KeyType: HASH
        Projection:
          ProjectionType: ALL
      TableName:
        Ref: AWSMarketplaceMeteringRecordsTableName
    Metadata:
      SamResourceId: AWSMarketplaceMeteringRecords
  AWSMarketplaceSubscribers:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: customerIdentifier
        AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
      - AttributeName: customerIdentifier
        KeyType: HASH
      TableName:
        Ref: NewSubscribersTableName
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
    Metadata:
      SamResourceId: AWSMarketplaceSubscribers
  RegisterNewMarketplaceCustomer:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://ws-assets-prod-iad-r-iad-ed304a55c2ca1aee/cc168d1f-b5c7-4b68-a2f9-d785d68b2f19/saas/saas-integration-reference-cloudformation-deployment/81762db83176c6394fb7a216a84ed855
      Handler: register-new-subscriber.registerNewSubscriber
      Runtime: nodejs22.x
      Environment:
        Variables:
          NewSubscribersTableName:
            Ref: NewSubscribersTableName
          EntitlementQueueUrl:
            Fn::If:
            - CreateEntitlementLogic
            - Ref: EntitlementSQSQueue
            - Ref: AWS::NoValue
          MarketplaceSellerEmail:
            Fn::If:
            - Buyernotificationemail
            - Ref: MarketplaceSellerEmail
            - Ref: AWS::NoValue
      Policies:
      - DynamoDBWritePolicy:
          TableName:
            Ref: NewSubscribersTableName
      - Statement:
        - Sid: AWSMarketplaceResolveCustomer
          Effect: Allow
          Action:
          - aws-marketplace:ResolveCustomer
          Resource: '*'
      - Fn::If:
        - CreateEntitlementLogic
        - Statement:
          - Sid: SQSPolicy
            Effect: Allow
            Action:
            - sqs:SendMessage
            Resource:
              Fn::GetAtt:
              - EntitlementSQSQueue
              - Arn
        - Ref: AWS::NoValue
      - Statement:
        - Sid: Sendemail
          Effect: Allow
          Action:
          - ses:SendEmail
          Resource: '*'
      Events:
        RegisterCustomer:
          Type: Api
          Properties:
            Path: /subscriber
            Method: post
            RestApiId:
              Ref: ServerlessApi
    Metadata:
      SamResourceId: RegisterNewMarketplaceCustomer
  EntitlementSQSQueue:
    Type: AWS::SQS::Queue
    Condition: CreateEntitlementLogic
    Metadata:
      SamResourceId: EntitlementSQSQueue
  EntitlementSQSHandler:
    Type: AWS::Serverless::Function
    Condition: CreateEntitlementLogic
    Properties:
      CodeUri: s3://ws-assets-prod-iad-r-iad-ed304a55c2ca1aee/cc168d1f-b5c7-4b68-a2f9-d785d68b2f19/saas/saas-integration-reference-cloudformation-deployment/81762db83176c6394fb7a216a84ed855
      Handler: entitlement-sqs.handler
      Runtime: nodejs22.x
      Environment:
        Variables:
          NewSubscribersTableName:
            Ref: NewSubscribersTableName
      Policies:
      - DynamoDBWritePolicy:
          TableName:
            Ref: NewSubscribersTableName
      - SQSSendMessagePolicy:
          QueueName:
            Fn::GetAtt:
            - EntitlementSQSQueue
            - Arn
      - Statement:
        - Sid: AWSMarketplaceEntitlements
          Effect: Allow
          Action:
          - aws-marketplace:GetEntitlements
          Resource: '*'
      Events:
        MySQSEvent:
          Type: SNS
          Properties:
            Topic:
              Fn::Sub: arn:aws:sns:${SNSRegion}:${SNSAccountID}:aws-mp-entitlement-notification-${GetProductCode.ProductCode}
            Region:
              Fn::Sub: ${SNSRegion}
            SqsSubscription:
              BatchSize: 1
              QueueArn:
                Fn::GetAtt:
                - EntitlementSQSQueue
                - Arn
              QueueUrl:
                Ref: EntitlementSQSQueue
    Metadata:
      SamResourceId: EntitlementSQSHandler
  SubscriptionSQSHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://ws-assets-prod-iad-r-iad-ed304a55c2ca1aee/cc168d1f-b5c7-4b68-a2f9-d785d68b2f19/saas/saas-integration-reference-cloudformation-deployment/81762db83176c6394fb7a216a84ed855
      Handler: subscription-sqs.SQSHandler
      Runtime: nodejs22.x
      Environment:
        Variables:
          NewSubscribersTableName:
            Ref: NewSubscribersTableName
          SupportSNSArn:
            Ref: SupportSNSTopic
      Policies:
      - DynamoDBWritePolicy:
          TableName:
            Ref: NewSubscribersTableName
      - Statement:
        - Sid: SNSPublish
          Effect: Allow
          Action:
          - sns:Publish
          Resource:
            Ref: SupportSNSTopic
      Events:
        MySQSEvent:
          Type: SNS
          Properties:
            Topic:
              Fn::Sub: arn:aws:sns:${SNSRegion}:${SNSAccountID}:aws-mp-subscription-notification-${GetProductCode.ProductCode}
            Region:
              Fn::Sub: ${SNSRegion}
            SqsSubscription: true
    Metadata:
      SamResourceId: SubscriptionSQSHandler
  SupportSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
      - Endpoint:
          Ref: MarketplaceTechAdminEmail
        Protocol: email
    Metadata:
      SamResourceId: SupportSNSTopic
  GrantOrRevokeAccess:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://ws-assets-prod-iad-r-iad-ed304a55c2ca1aee/cc168d1f-b5c7-4b68-a2f9-d785d68b2f19/saas/saas-integration-reference-cloudformation-deployment/81762db83176c6394fb7a216a84ed855
      Handler: grant-revoke-access-to-product.dynamodbStreamHandler
      Runtime: nodejs22.x
      Environment:
        Variables:
          SupportSNSArn:
            Ref: SupportSNSTopic
          LOG_LEVEL: info
      Policies:
      - AWSLambdaDynamoDBExecutionRole
      - Statement:
        - Sid: SNSPublish
          Effect: Allow
          Action:
          - sns:Publish
          Resource:
            Ref: SupportSNSTopic
      Events:
        Stream:
          Type: DynamoDB
          Properties:
            Stream:
              Fn::GetAtt:
              - AWSMarketplaceSubscribers
              - StreamArn
            BatchSize: 1
            StartingPosition: TRIM_HORIZON
    Metadata:
      SamResourceId: GrantOrRevokeAccess
  Hourly:
    Type: AWS::Serverless::Function
    Condition: CreateSubscriptionLogic
    Properties:
      CodeUri: s3://ws-assets-prod-iad-r-iad-ed304a55c2ca1aee/cc168d1f-b5c7-4b68-a2f9-d785d68b2f19/saas/saas-integration-reference-cloudformation-deployment/81762db83176c6394fb7a216a84ed855
      Handler: metering-hourly-job.job
      Runtime: nodejs22.x
      Environment:
        Variables:
          SQSMeteringRecordsUrl:
            Ref: SQSMeteringRecords
          AWSMarketplaceMeteringRecordsTableName:
            Ref: AWSMarketplaceMeteringRecordsTableName
      Policies:
      - DynamoDBReadPolicy:
          TableName:
            Ref: AWSMarketplaceMeteringRecordsTableName
      - SQSSendMessagePolicy:
          QueueName:
            Fn::GetAtt:
            - SQSMeteringRecords
            - QueueName
      Events:
        CWSchedule:
          Type: Schedule
          Properties:
            Schedule: rate(1 hour)
            Name:
              Fn::Join:
              - '-'
              - - MeteringSchedule
                - Fn::Select:
                  - 0
                  - Fn::Split:
                    - '-'
                    - Fn::Select:
                      - 2
                      - Fn::Split:
                        - /
                        - Ref: AWS::StackId
            Description: SaaS Metering
            Enabled: true
    Metadata:
      SamResourceId: Hourly
  SQSMeteringRecords:
    Type: AWS::SQS::Queue
    Properties:
      QueueName:
        Fn::Join:
        - '-'
        - - Fn::Select:
            - 0
            - Fn::Split:
              - '-'
              - Fn::Select:
                - 2
                - Fn::Split:
                  - /
                  - Ref: AWS::StackId
          - SQSMeteringRecords.fifo
      ContentBasedDeduplication: true
      FifoQueue: true
      MessageRetentionPeriod: 3000
    Condition: CreateSubscriptionLogic
    Metadata:
      SamResourceId: SQSMeteringRecords
  MeteringSQSHandler:
    Type: AWS::Serverless::Function
    Condition: CreateSubscriptionLogic
    Properties:
      CodeUri: s3://ws-assets-prod-iad-r-iad-ed304a55c2ca1aee/cc168d1f-b5c7-4b68-a2f9-d785d68b2f19/saas/saas-integration-reference-cloudformation-deployment/81762db83176c6394fb7a216a84ed855
      Handler: metering-sqs.handler
      Runtime: nodejs22.x
      Environment:
        Variables:
          ProductCode:
            Fn::GetAtt:
            - GetProductCode
            - ProductCode
          AWSMarketplaceMeteringRecordsTableName:
            Ref: AWSMarketplaceMeteringRecordsTableName
      Policies:
      - DynamoDBWritePolicy:
          TableName:
            Ref: AWSMarketplaceMeteringRecordsTableName
      - Statement:
        - Sid: AWSMarketplaceMetering
          Effect: Allow
          Action:
          - aws-marketplace:BatchMeterUsage
          Resource: '*'
      Events:
        MySQSEvent:
          Type: SQS
          Properties:
            Queue:
              Fn::GetAtt:
              - SQSMeteringRecords
              - Arn
            BatchSize: 1
          Bucket:
            Fn::GetAtt:
            - WebsiteS3BucketLog
            - DomainName
          IncludeCookies: false
          Prefix: access-logs
    Metadata:
      SamResourceId: MeteringSQSHandler
  WebsiteS3Bucket:
    Type: AWS::S3::Bucket
    Condition: CreateWeb
    Properties:
      BucketName:
        Ref: WebsiteS3BucketName
    Metadata:
      SamResourceId: WebsiteS3Bucket
  WebsiteS3BucketLog:
    Type: AWS::S3::Bucket
    Condition: CreateWeb
    Properties:
      BucketName:
        Fn::Join:
        - '-'
        - - Ref: WebsiteS3BucketName
          - log
      OwnershipControls:
        Rules:
        - ObjectOwnership: BucketOwnerPreferred
      IntelligentTieringConfigurations:
      - Id:
          Fn::Join:
          - '-'
          - - Ref: WebsiteS3BucketName
            - log
        Status: Enabled
        Tierings:
        - AccessTier: ARCHIVE_ACCESS
          Days: 90
    Metadata:
      SamResourceId: WebsiteS3BucketLog
  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Condition: CreateWeb
    Properties:
      Bucket:
        Ref: WebsiteS3Bucket
      PolicyDocument:
        Statement:
        - Effect: Allow
          Sid: AllowCloudFrontServicePrincipal
          Action: s3:GetObject
          Resource:
          - Fn::Sub: arn:aws:s3:::${WebsiteS3Bucket}/*
          Principal:
            Service: cloudfront.amazonaws.com
          Condition:
            StringEquals:
              AWS:SourceArn:
              - Fn::Sub: arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudfrontDistribution}
    Metadata:
      SamResourceId: S3BucketPolicy
  LambdaRedirectPostRequests:
    Type: AWS::Serverless::Function
    Condition: CreateWeb
    Properties:
      Runtime: nodejs22.x
      CodeUri: s3://ws-assets-prod-iad-r-iad-ed304a55c2ca1aee/cc168d1f-b5c7-4b68-a2f9-d785d68b2f19/saas/saas-integration-reference-cloudformation-deployment/81762db83176c6394fb7a216a84ed855
      Handler: redirect.redirecthandler
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action: sts:AssumeRole
          Principal:
            Service:
            - lambda.amazonaws.com
      Environment:
        Variables:
          RedirectUrl: https://aws-ia.github.io/cloudformation-aws-marketplace-saas/#_post_deployment_steps
      Events:
        RedirectMarketplaceToken:
          Type: Api
          Properties:
            Path: /redirectmarketplacetoken
            Method: post
            RestApiId:
              Ref: ServerlessApi
    Metadata:
      SamResourceId: LambdaRedirectPostRequests
  CloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Description:
          Fn::Join:
          - '-'
          - - Origin Access Control for static website
            - Fn::Select:
              - 0
              - Fn::Split:
                - '-'
                - Fn::Select:
                  - 2
                  - Fn::Split:
                    - /
                    - Ref: AWS::StackId
        Name:
          Fn::Join:
          - '-'
          - - OAC
            - Fn::Select:
              - 0
              - Fn::Split:
                - '-'
                - Fn::Select:
                  - 2
                  - Fn::Split:
                    - /
                    - Ref: AWS::StackId
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4
    Metadata:
      SamResourceId: CloudFrontOriginAccessControl
  CloudfrontDistribution:
    Type: AWS::CloudFront::Distribution
    Condition: CreateWeb
    DependsOn: ServerlessApi
    Properties:
      DistributionConfig:
        Comment:
          Fn::Join:
          - '-'
          - - Cloudfront distribution for serverless website
            - Fn::Select:
              - 0
              - Fn::Split:
                - '-'
                - Fn::Select:
                  - 2
                  - Fn::Split:
                    - /
                    - Ref: AWS::StackId
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2
        Origins:
        - Id: s3-website
          DomainName:
            Fn::GetAtt:
            - WebsiteS3Bucket
            - RegionalDomainName
          OriginAccessControlId:
            Ref: CloudFrontOriginAccessControl
          S3OriginConfig:
            OriginAccessIdentity: ''
        - Id: api-gateway
          DomainName:
            Fn::Sub: ${ServerlessApi}.execute-api.${AWS::Region}.amazonaws.com
          CustomOriginConfig:
            OriginProtocolPolicy: https-only
            OriginSSLProtocols:
            - TLSv1.2
            HTTPSPort: 443
          OriginPath: /Prod
        DefaultCacheBehavior:
          Compress: true
          AllowedMethods:
          - HEAD
          - DELETE
          - POST
          - GET
          - OPTIONS
          - PUT
          - PATCH
          ForwardedValues:
            QueryString: false
          TargetOriginId: s3-website
          ViewerProtocolPolicy: redirect-to-https
        CacheBehaviors:
        - PathPattern: /redirectmarketplacetoken
          AllowedMethods:
          - HEAD
          - DELETE
          - POST
          - GET
          - OPTIONS
          - PUT
          - PATCH
          TargetOriginId: api-gateway
          ViewerProtocolPolicy: redirect-to-https
          ResponseHeadersPolicyId: 60669652-455b-4ae9-85a4-c4c02393f86c
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
          OriginRequestPolicyId: b689b0a8-53d0-40ab-baf2-68738e2966ac
        - PathPattern: /subscriber
          AllowedMethods:
          - HEAD
          - DELETE
          - POST
          - GET
          - OPTIONS
          - PUT
          - PATCH
          TargetOriginId: api-gateway
          ViewerProtocolPolicy: redirect-to-https
          ResponseHeadersPolicyId: 60669652-455b-4ae9-85a4-c4c02393f86c
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
          OriginRequestPolicyId: b689b0a8-53d0-40ab-baf2-68738e2966ac
        Logging:
          Bucket:
            Fn::GetAtt:
            - WebsiteS3BucketLog
            - DomainName
          IncludeCookies: false
          Prefix: access-logs
    Metadata:
      SamResourceId: CloudfrontDistribution
  S3ContentHome:
    Type: Custom::Lambda
    Condition: CreateWeb
    Properties:
      ServiceToken:
        Fn::GetAtt:
        - S3ContentCustomResource
        - Arn
      BucketName:
        Ref: WebsiteS3Bucket
      Key: index.html
      ContentType: text/html
      Body: "<!doctype html>\n<html lang=\"en\">\n<head>\n  <!-- Required meta tags\
        \ -->\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width,\
        \ initial-scale=1, shrink-to-fit=no\">\n  <!-- Bootstrap CSS -->\n  <link\
        \ rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"\
        \n    integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\"\
        \ crossorigin=\"anonymous\">\n  <link rel=\"stylesheet\" href=\"style.css\"\
        >\n  <title>Registration page</title>\n</head>\n<body class=\"text-center\"\
        >\n  <div class=\"container\">\n    <div id=\"alert\"></div>\n    <form class=\"\
        form-signin\" method=\"POST\" enctype=\"multipart/form-data\">\n      <img\
        \ class=\"mb-4\" src=\"logo.png\" alt=\"\" width=\"72\" height=\"72\">\n \
        \     <h1 class=\"h3 mb-3 font-weight-normal\">Please enter your contact details</h1>\n\
        \      <label for=\"companyName\" class=\"sr-only\">Company name</label>\n\
        \      <input type=\"text\" name=\"companyName\" class=\"form-control\" placeholder=\"\
        Company name\" required autofocus>\n      <label for=\"contactPerson\" class=\"\
        sr-only\">Contact person</label>\n      <input type=\"text\" name=\"contactPerson\"\
        \ class=\"form-control\" placeholder=\"Contact person\" required autofocus>\n\
        \      <label for=\"Contact phone\" class=\"sr-only\">Contact phone</label>\n\
        \      <input type=\"tel\" name=\"contactPhone\" class=\"form-control\" placeholder=\"\
        Contact phone\" required autofocus>\n      <label for=\"contactEmail\" class=\"\
        sr-only\">Email address</label>\n      <input type=\"email\" name=\"contactEmail\"\
        \ class=\"form-control\" placeholder=\"Email address\" required autofocus>\n\
        \      <button class=\"btn btn-lg btn-primary btn-block\" type=\"submit\"\
        >Register</button>\n      <p class=\"mt-5 mb-3 text-muted\">&copy; 2024</p>\n\
        \    </form>\n  </div>\n  <!-- Optional JavaScript -->\n  <!-- jQuery first,\
        \ then Popper.js, then Bootstrap JS -->\n  <script src=\"https://code.jquery.com/jquery-3.7.0.min.js\"\
        \n    integrity=\"sha384-NXgwF8Kv9SSAr+jemKKcbvQsz+teULH/a5UNJvZc6kP47hZgl62M1vGnw6gHQhb1\"\
        \n    crossorigin=\"anonymous\"></script>\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js\"\
        \n    integrity=\"sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1\"\
        \n    crossorigin=\"anonymous\"></script>\n  <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js\"\
        \n    integrity=\"sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM\"\
        \n    crossorigin=\"anonymous\"></script>\n  <script src=\"/script.js\"></script>\n\
        </body>\n</html>\n"
    Metadata:
      SamResourceId: S3ContentHome
  S3ContentScript:
    Type: Custom::Lambda
    Condition: CreateWeb
    Properties:
      ServiceToken:
        Fn::GetAtt:
        - S3ContentCustomResource
        - Arn
      BucketName:
        Ref: WebsiteS3Bucket
      Key: script.js
      ContentType: text/javascript
      Body: "const form = document.getElementsByClassName('form-signin')[0];\nconst\
        \ showAlert = (cssClass, message) => {\n  const html = `\n    <div class=\"\
        alert alert-${cssClass} alert-dismissible\" role=\"alert\">\n        <strong>${message}</strong>\n\
        \        <button class=\"close\" type=\"button\" data-dismiss=\"alert\" aria-label=\"\
        Close\">\n            <span aria-hidden=\"true\">\xD7</span>\n        </button>\n\
        \    </div>`;\n  document.querySelector('#alert').innerHTML += html;\n};\n\
        const formToJSON = (elements) => [].reduce.call(elements, (data, element)\
        \ => {\n  data[element.name] = element.value;\n  return data;\n}, {});\nconst\
        \ getUrlParameter = (name) => {\n  name = name.replace(/[\\[]/, '\\\\[').replace(/[\\\
        ]]/, '\\\\]');\n  const regex = new RegExp(`[\\\\?&]${name}=([^&#]*)`);\n\
        \  const results = regex.exec(location.search);\n  return results === null\
        \ ? '' : decodeURIComponent(results[1].replace(/\\+/g, ' '));\n};\nconst handleFormSubmit\
        \ = (event) => {\n  event.preventDefault();\n  const postUrl = `/subscriber`;\n\
        \  const regToken = getUrlParameter('x-amzn-marketplace-token');\n  if (!regToken)\
        \ {\n    showAlert('danger',\n      'Registration Token Missing. Please go\
        \ to AWS Marketplace and follow the instructions to set up your account!');\n\
        \  } else {\n    const data = formToJSON(form.elements);\n    data.regToken\
        \ = regToken;\n    const xhr = new XMLHttpRequest();\n    xhr.open('POST',\
        \ postUrl, true);\n    xhr.setRequestHeader('Content-Type', 'application/json');\n\
        \    xhr.send(JSON.stringify(data));\n    xhr.onreadystatechange = () => {\n\
        \      if (xhr.readyState == XMLHttpRequest.DONE) {\n        showAlert('primary',\
        \ xhr.responseText);\n        console.log(JSON.stringify(xhr.responseText));\n\
        \      }\n    };\n  }\n};\nform.addEventListener('submit', handleFormSubmit);\n\
        const regToken = getUrlParameter('x-amzn-marketplace-token');\nif (!regToken)\
        \ {\n  showAlert('danger', 'Registration Token Missing. Please go to AWS Marketplace\
        \ and follow the instructions to set up your account!');\n}\n"
    Metadata:
      SamResourceId: S3ContentScript
  S3ContentStyle:
    Type: Custom::Lambda
    Condition: CreateWeb
    Properties:
      ServiceToken:
        Fn::GetAtt:
        - S3ContentCustomResource
        - Arn
      BucketName:
        Ref: WebsiteS3Bucket
      Key: style.css
      ContentType: text/css
      Body: "html,\nbody {\n  height: 100%;\n}\nbody {\n  display: -ms-flexbox;\n\
        \  display: flex;\n  -ms-flex-align: center;\n  align-items: center;\n  padding-top:\
        \ 40px;\n  padding-bottom: 40px;\n  background-color: #f5f5f5;\n}\n.form-signin\
        \ {\n  width: 100%;\n  max-width: 330px;\n  padding: 15px;\n  margin: auto;\n\
        }\n.form-signin .checkbox {\n  font-weight: 400;\n}\n.form-signin .form-control\
        \ {\n  position: relative;\n  box-sizing: border-box;\n  height: auto;\n \
        \ padding: 10px;\n  font-size: 16px;\n  margin-top:5px;\n}\n.form-signin .form-control:focus\
        \ {\n  z-index: 2;\n}\n.form-signin input[type=\"email\"] {\n  margin-bottom:\
        \ -1px;\n  border-bottom-right-radius: 0;\n  border-bottom-left-radius: 0;\n\
        }\n.form-signin input[type=\"password\"] {\n  margin-bottom: 10px;\n  border-top-left-radius:\
        \ 0;\n  border-top-right-radius: 0;\n}\n.bd-placeholder-img {\n  font-size:\
        \ 1.125rem;\n  text-anchor: middle;\n  -webkit-user-select: none;\n  -moz-user-select:\
        \ none;\n  -ms-user-select: none;\n  user-select: none;\n}\n@media (min-width:\
        \ 768px) {\n  .bd-placeholder-img-lg {\n    font-size: 3.5rem;\n  }\n}\n"
    Metadata:
      SamResourceId: S3ContentStyle
  S3ContentLogo:
    Type: Custom::Lambda
    Condition: CreateWeb
    Properties:
      ServiceToken:
        Fn::GetAtt:
        - S3ContentCustomResource
        - Arn
      BucketName:
        Ref: WebsiteS3Bucket
      Key: logo.png
      ContentType: image/png
      IsBase64Encoded: true
      Body: 
    Metadata:
      SamResourceId: S3ContentLogo
  S3ContentFavicon:
    Type: Custom::Lambda
    Condition: CreateWeb
    Properties:
      ServiceToken:
        Fn::GetAtt:
        - S3ContentCustomResource
        - Arn
      BucketName:
        Ref: WebsiteS3Bucket
      Key: favicon.ico
      ContentType: image/x-icon
      IsBase64Encoded: true
      Body: AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAArmYf/51RE/8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACuZh//rmYf/65mH/+dURP/nVET/51RE/8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACuZh//rmYf/65mH/+uZh//nVET/51RE/+dURP/nVET/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAArmYf/65mH/+uZh//rmYf/51RE/+dURP/nVET/51RE/8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAK5mH/+uZh//rmYf/65nH/+eUhP/nVET/51RE/+dURP/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACuZh//rmYf/7p9F/+6fRf/un0X/7p9F/+dUhP/nVET/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALp9F/+6fRf/un0X/7p9F/+6fRf/un0X/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIXvu/yRf4/oAAAAAAAAAALp9F/+6fRf/AAAAAAAAAADJowD1uI0D/wAAAAAAAAAAAAAAABVQmwghe+7/IXvu/yF77v8kX+P/JF/j/yRf4/8AAAAAAAAAAMmjAP/JowD/yaMA/7iNA/+4jQP/uI0D/3hcAgghe+7/IXvu/yF77v8he+7/JF/j/yRf4/8kX+P/G0eqnJd6AJzJowD/yaMA/8mjAP+4jQP/uI0D/7iNA/+4jQP/IXvu/yF77v8he+7/IXvu/yRf4/8kX+P/JF/j/xtHqpyXegCcyaMA/8mjAP/JowD/uI0D/7iNA/+4jQP/uI0D/yF77v8he+7/IXvu/yWE8f8kX+P/JF/j/yRf4/8bR6qcl3oAnMmjAP/JowD/yaMA/8SeE/+4jQP/uI0D/7iNA/8he+7/LJX3/yyW9/8slvf/LJb3/yyW9/8kX+P/G0eqnJd6AJzJowD/2sE0/9rBNP/awTT/2sE0/9i+Mf+4jQP/AAAAACyW9/8slvf/LJb3/yyW9/8slvf/LJb3/wAAAAAAAAAA2sE0/9rBNP/awTT/2sE0/9rBNP/awTT/AAAAAAAAAAAAAAAAAAAAACyW9/8slvf5AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA2sE0/trBNP8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/n8AAPgfAADwDwAA8A8AAPAPAADwDwAA+B8AAOZnAACBgQAAAAAAAAAAAAAAAAAAAAAAAIGBAADn5wAA//8AAA==
    Metadata:
      SamResourceId: S3ContentFavicon
  S3ContentCustomResource:
    Type: AWS::Lambda::Function
    Condition: CreateWeb
    DependsOn: S3ContentCustomResourceLogGroup
    Properties:
      Code:
        ZipFile: "const { S3Client, PutObjectCommand, DeleteObjectCommand } = require(\"\
          @aws-sdk/client-s3\");\nconst s3Client = new S3Client();\nexports.handler\
          \ = async function(event, context) {\n  console.log(\"REQUEST RECEIVED:\\\
          n\" + JSON.stringify(event));\n  let responseStatus = \"FAILED\";\n  let\
          \ responseData = {};\n  let physicalResourceId = event.ResourceProperties.Key;\n\
          \  // For Delete requests, delete object.\n  if (event.RequestType == \"\
          Delete\") {\n    console.log(`Deleting s3://${event.ResourceProperties.BucketName}/${event.ResourceProperties.Key}`);\n\
          \    try {\n      const deleteObjectCommand = new DeleteObjectCommand({\n\
          \        Bucket: event.ResourceProperties.BucketName,\n        Key: event.ResourceProperties.Key\n\
          \      });\n      await s3Client.send(deleteObjectCommand);\n      responseStatus\
          \ = \"SUCCESS\";\n      console.log(\"Deleted\");\n    } catch (e) {\n \
          \     console.error(`Failed to delete object: ${e.message}`);\n    }\n \
          \ } else {\n    const body = typeof event.ResourceProperties.IsBase64Encoded\
          \ == \"string\" && event.ResourceProperties.IsBase64Encoded.toLowerCase()\
          \ == \"true\" ? Buffer.from(event.ResourceProperties.Body, 'base64') : event.ResourceProperties.Body;\n\
          \    console.log(`Saving s3://${event.ResourceProperties.BucketName}/${event.ResourceProperties.Key}`);\n\
          \    try {\n      const putObjectCommand = new PutObjectCommand({\n    \
          \    Body: body,\n        Bucket: event.ResourceProperties.BucketName,\n\
          \        Key: event.ResourceProperties.Key,\n        ContentType: event.ResourceProperties.ContentType\n\
          \      });\n      await s3Client.send(putObjectCommand);\n      console.log(\"\
          Saved\");\n      responseData[\"BucketName\"] = event.ResourceProperties.BucketName;\n\
          \      responseData[\"Key\"] = event.ResourceProperties.Key;\n      responseData[\"\
          ContentType\"] = event.ResourceProperties.ContentType;\n      responseStatus\
          \ = \"SUCCESS\";\n    } catch (e) {\n      console.log(`Could not save to\
          \ S3: ${e.message}`);\n    }\n  }\n  return await sendResponse(event, context,\
          \ responseStatus, responseData, physicalResourceId);\n};\n// Send response\
          \ to the pre-signed S3 URL \nconst sendResponse = async function(event,\
          \ context, responseStatus, responseData, physicalResourceId) {\n  let responseBody\
          \ = JSON.stringify({\n      Status: responseStatus,\n      Reason: \"See\
          \ the details in CloudWatch Log Stream: \" + context.logStreamName,\n  \
          \    PhysicalResourceId: physicalResourceId,\n      StackId: event.StackId,\n\
          \      RequestId: event.RequestId,\n      LogicalResourceId: event.LogicalResourceId,\n\
          \      Data: responseData\n  });\n  console.log(\"RESPONSE BODY:\\n\", responseBody);\n\
          \  await sendRequest(event.ResponseURL, {\n    method: \"PUT\",\n    body:\
          \ responseBody\n  })\n};\n// Web request\nconst sendRequest = async function(url,\
          \ opt) {\n  opt = opt ? opt : {};\n  const parsedUrl = require(\"url\").parse(url);\n\
          \  let headers = opt.headers ? opt.headers : {};\n  headers[\"Content-length\"\
          ] = opt.body ? opt.body.length : 0;\n  const options = {\n    hostname:\
          \ parsedUrl.hostname,\n    port: opt.port ? opt.port : (parsedUrl.protocol\
          \ == \"https:\" ? 443 : 80),\n    path: parsedUrl.path,\n    method: opt.method\
          \ ? opt.method : \"GET\",\n    headers: headers\n  };\n  let response =\
          \ await new Promise(function(res, err) {\n    let request = require(parsedUrl.protocol\
          \ == \"https:\" ? \"https\" : \"http\").request(options, function(response)\
          \ {\n      let responseText = [];\n      response.on(\"data\", function(d)\
          \ {\n        responseText.push(d);\n      });\n      response.on(\"end\"\
          , function() {\n        response.responseText = responseText.join(\"\");\n\
          \        res(response);\n      });\n    });\n    request.on(\"error\", function(error)\
          \ {\n      console.error(\"sendRequest Error: \" + error);\n      err(error);\n\
          \    });\n    request.write(opt.body ? opt.body : \"\");\n    request.end();\n\
          \  });\n  return response;\n};\n"
      FunctionName:
        Fn::Sub:
        - S3ContentCustomResource-${id}
        - id:
            Fn::Select:
            - 0
            - Fn::Split:
              - '-'
              - Fn::Select:
                - 2
                - Fn::Split:
                  - /
                  - Ref: AWS::StackId
      Handler: index.handler
      Role:
        Fn::GetAtt:
        - S3ContentCustomResourceRole
        - Arn
      Runtime: nodejs22.x
    Metadata:
      SamResourceId: S3ContentCustomResource
  S3ContentCustomResourceRole:
    Type: AWS::IAM::Role
    Condition: CreateWeb
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: LambdaExecute
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource:
            - Fn::Sub:
              - arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/S3ContentCustomResource-${id}*
              - id:
                  Fn::Select:
                  - 0
                  - Fn::Split:
                    - '-'
                    - Fn::Select:
                      - 2
                      - Fn::Split:
                        - /
                        - Ref: AWS::StackId
          - Effect: Allow
            Action:
            - s3:PutObject
            - s3:DeleteObject
            Resource:
              Fn::Sub: ${WebsiteS3Bucket.Arn}/*
    Metadata:
      SamResourceId: S3ContentCustomResourceRole
  S3ContentCustomResourceLogGroup:
    Type: AWS::Logs::LogGroup
    Condition: CreateWeb
    Properties:
      LogGroupName:
        Fn::Sub:
        - /aws/lambda/S3ContentCustomResource-${id}
        - id:
            Fn::Select:
            - 0
            - Fn::Split:
              - '-'
              - Fn::Select:
                - 2
                - Fn::Split:
                  - /
                  - Ref: AWS::StackId
      RetentionInDays: 7
    Metadata:
      SamResourceId: S3ContentCustomResourceLogGroup
  GetProductCode:
    Type: Custom::Lambda
    Properties:
      ServiceToken:
        Fn::GetAtt:
        - GetProductCodeCustomResource
        - Arn
      ProductId:
        Ref: ProductId
    Metadata:
      SamResourceId: GetProductCode
  GetProductCodeCustomResource:
    Type: AWS::Lambda::Function
    Properties:
      Role:
        Fn::GetAtt:
        - CAPILambdasExecutionRole
        - Arn
      Runtime: nodejs22.x
      Handler: index.handler
      Code:
        ZipFile: "const { MarketplaceCatalogClient, DescribeEntityCommand } = require(\"\
          @aws-sdk/client-marketplace-catalog\");\nconst response = require('cfn-response');\n\
          exports.handler = async (event, context) => {\ncontext.callbackWaitsForEmptyEventLoop\
          \ = true;\n  console.log(\"REQUEST RECEIVED:\\n\" + JSON.stringify(event));\n\
          \  const client = new MarketplaceCatalogClient({ region: 'us-east-1' });\n\
          \  const productId = event.ResourceProperties.ProductId; // Assuming the\
          \ product ID is passed as an event parameter\n\n  try {\n      if (event.RequestType\
          \ === 'Create' || event.RequestType === 'Update') {\n          // Fetch\
          \ the product details from AWS Marketplace\n          const command = new\
          \ DescribeEntityCommand({\n              Catalog: 'AWSMarketplace',\n  \
          \            EntityId: productId,\n              EntityType: 'Product'\n\
          \          });\n          const resp = await client.send(command);\n\n \
          \         // Extract the product code from the response\n          const\
          \ productCode = resp.DetailsDocument.Description.ProductCode;\n\n      \
          \    const responseData = {\n              ProductCode: productCode\n  \
          \        };\n\n          await response.send(event, context, 'SUCCESS',\
          \ responseData);\n      } else if (event.RequestType === 'Delete') {\n \
          \         // No action needed for delete\n          await response.send(event,\
          \ context, 'SUCCESS', {});\n      } else {\n          await response.send(event,\
          \ context, 'FAILED', { error: 'Invalid request type' });\n      }\n  } catch\
          \ (error) {\n      console.error('Error:', error);\n      await response.send(event,\
          \ context, 'FAILED', { error: 'Failed to fetch product code' });\n  }\n\
          };\n"
    Metadata:
      SamResourceId: GetProductCodeCustomResource
  CAPILambdasExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: manage-products
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - aws-marketplace:StartChangeSet
            - aws-marketplace:DescribeEntity
            Resource:
            - Fn::Sub: arn:${AWS::Partition}:aws-marketplace:us-east-1:${AWS::AccountId}:AWSMarketplace/SaaSProduct/${ProductId}
            - Fn::Sub: arn:${AWS::Partition}:aws-marketplace:us-east-1:${AWS::AccountId}:AWSMarketplace/ChangeSet/*
    Metadata:
      SamResourceId: CAPILambdasExecutionRole
  FulfillmentURL:
    Type: Custom::Lambda
    Condition: UpdateFulfillment
    Properties:
      ServiceToken:
        Fn::GetAtt:
        - UpdateFulfillmentURLCustomResource
        - Arn
      ProductId:
        Ref: ProductId
      FulfillmentUrl:
        Fn::If:
        - CreateWeb
        - Fn::Sub: https://${CloudfrontDistribution.DomainName}/redirectmarketplacetoken
        - Fn::Sub: https://${ServerlessApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/redirectmarketplacetoken
    Metadata:
      SamResourceId: FulfillmentURL
  UpdateFulfillmentURLCustomResource:
    Type: AWS::Lambda::Function
    Properties:
      Role:
        Fn::GetAtt:
        - CAPILambdasExecutionRole
        - Arn
      Runtime: nodejs22.x
      Handler: index.handler
      Code:
        ZipFile: "const { MarketplaceCatalogClient, DescribeEntityCommand, StartChangeSetCommand\
          \ } = require(\"@aws-sdk/client-marketplace-catalog\");\nconst response\
          \ = require('cfn-response');\nexports.handler = async (event, context) =>\
          \ {\n  console.log(\"REQUEST RECEIVED:\\n\" + JSON.stringify(event));\n\
          \  const client = new MarketplaceCatalogClient({ region: 'us-east-1' });\n\
          \  const productId = event.ResourceProperties.ProductId;\n  const fulfillmentUrl\
          \ = event.ResourceProperties.FulfillmentUrl;\n  try {\n    if (event.RequestType\
          \ === 'Create' || event.RequestType === 'Update') {\n          // Fetch\
          \ the fulfillment url id to be able to update the fulfillment url\n    \
          \      let command = new DescribeEntityCommand({\n              Catalog:\
          \ 'AWSMarketplace',\n              EntityId: productId,\n              EntityType:\
          \ 'Product'\n          });\n          let resp = await client.send(command);\n\
          \          console.debug(\"DescribeEntityCommand:\\n\" + JSON.stringify(resp));\n\
          \          \n          \n          const fulfillmentUrlID = resp.DetailsDocument.Versions[0].DeliveryOptions[0].Id\n\
          \          console.debug(\"FullfilmentId:\\n\" + fulfillmentUrlID);\n  \
          \        \n          const details = { \n            DeliveryOptions : [{\n\
          \              Id: fulfillmentUrlID,\n              Details: {\n       \
          \         SaaSUrlDeliveryOptionDetails: {\n                  FulfillmentUrl:\
          \ fulfillmentUrl\n                }\n              }\n            }]\n \
          \         };\n          console.debug(\"details:\\n\" + JSON.stringify(details));\n\
          \          \n          const startChangeSetInput = { \n            Catalog:\
          \ 'AWSMarketplace',\n            ChangeSet: [ \n              { \n     \
          \           ChangeType: 'UpdateDeliveryOptions',\n                Entity:\
          \ {\n                  Identifier: productId,\n                  Type: 'SaaSProduct@1.0'\n\
          \                },\n                Details: JSON.stringify(details)\n\
          \              }\n            ]\n          };\n          console.debug(\"\
          startChangeSetInput:\\n\" + JSON.stringify(startChangeSetInput));\n    \
          \      \n          command = new StartChangeSetCommand(startChangeSetInput);\n\
          \          resp = await client.send(command);\n          console.debug(\"\
          StartChangeSetResp: \\n\" + JSON.stringify(resp));\n\n          const responseData\
          \ = {\n              StartChangeSetResp: JSON.stringify(resp)\n        \
          \  };\n\n          await response.send(event, context, 'SUCCESS', responseData);\n\
          \      } else if (event.RequestType === 'Delete') {\n          // No action\
          \ needed for delete\n          await response.send(event, context, 'SUCCESS',\
          \ {});\n      } else {\n          await response.send(event, context, 'FAILED',\
          \ { error: 'Invalid request type' });\n      }\n  } catch (error) {\n  \
          \    console.error('Error:', error);\n      await response.send(event, context,\
          \ 'FAILED', { error: 'Failed to update fulfillment url' });\n  }\n};\n"
    Metadata:
      SamResourceId: UpdateFulfillmentURLCustomResource
Outputs:
  CrossAccountRole:
    Description: This is the cross account role ARN.
    Value:
      Fn::If:
      - CreateCrossAccount
      - Fn::GetAtt:
        - CrossAccountRoleForSaaSIntegration
        - Arn
      - N/A
  WebsiteS3Bucket:
    Description: S3 bucket for hosting the static site. You can retrieve the files
      at https://github.com/aws-samples/aws-marketplace-serverless-saas-integration/tree/main/web.
    Value:
      Fn::If:
      - CreateWeb
      - Fn::Sub: https://s3.console.aws.amazon.com/s3/buckets/${WebsiteS3Bucket}/
      - Fn::Sub: N/A
  LandingPagePreviewURL:
    Description: URL to preview your landing page. This is NOT the Fulfillment URL
      for your product.
    Value:
      Fn::If:
      - CreateWeb
      - Fn::Sub: https://${CloudfrontDistribution.DomainName}/index.html
      - N/A
  MarketplaceFulfillmentURL:
    Description: This is the Marketplace fulfillment URL.
    Value:
      Fn::If:
      - CreateWeb
      - Fn::Sub: https://${CloudfrontDistribution.DomainName}/redirectmarketplacetoken
      - Fn::Sub: https://${ServerlessApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/redirectmarketplacetoken
